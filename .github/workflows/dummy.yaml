# For auto generating this yaml file for .NET project run these command sequencely
#dotnet new workflow --search
#dotnet new --install TimHeuer.GitHubActions.Templates
#dotnet new workflow

name: Continues Integration and Deployment

on:
  push:
    branches:
      - master
      - stagging
      - qa
      - dev

env:
  DOTNET_VERSION: "6.0.x"
  AZURE_WEB_APP_NAME: rainers-first-webapp

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  RUN-SQL-SCRIPTS:
    runs-on:
      - self-hosted
      - label-test
    environment: ${{ github.ref_name }}
    steps:
      - name: Check Out Code ðŸš“
        uses: actions/checkout@v3

      - name: Run SQL Scripts ðŸ“œ
        shell: PowerShell
        run: |
          Write-Output ("THIS IS BRANCH - " + "${{ github.ref_name }}")
          $scriptPath = ((Get-Location).path + "\DB Script")
          Write-Output $scriptPath

          $instance = "${{ secrets.INSTANCE }}"
          $DbName = "${{ secrets.DBNAME }}"
          $UID = "${{ secrets.UID }}"
          $Password = "${{ secrets.PASSWORD }}"
          $OutputSQLFilePath = ($scriptPath + (Get-Date -UFormat "%d-%m-%Y") + ".log")

          $files = Get-ChildItem -Path $scriptPath -Recurse -Include *.sql
          foreach ($file in $files) 
          {
              Invoke-Sqlcmd -ServerInstance $instance -Database $DbName -Username $UID -Password $Password -InputFile $file
              if(!($?)){
                ($file.Name + " Contains Errors`n") >> $OutputSQLFilePath
                ($Error[0].Exception.Message + "`n") >> $OutputSQLFilePath
              }else{
                ($file.Name + " Successfully Executed.`n") >> $OutputSQLFilePath
              }
          }
          $github_URL = ("https://api.github.com/users/" + "${{ github.actor }}")
          $User = Invoke-RestMethod -Method Get -Uri $github_URL
          $username = ""
          if([string]::IsNullOrEmpty($User.name)){
              $username = $User.login
          }else{
              $username = $User.name
          }
          $title = ("Scripts executed on " + "${{ github.ref_name }}" + "by " + $username)
          Write-Output $title
          $message = (Get-Content $OutputSQLFilePath)
          Write-Output $message
          $param = @{
              Uri = "https://jsonplaceholder.typicode.com/posts"
              Method = "POST"
              Body = @{
                  id = 1
                  title = $title
                  body = $message
                  text = $message
              } | ConvertTo-Json
              ContentType = 'application/json'
          }
          Invoke-RestMethod @param
  Build_Test_Deploy:
    runs-on:
      - self-hosted
      - label-test
    environment: ${{ github.ref_name }}
    steps:
      - name: Test
        run: |
          $p = ""
      - name: Check Out Code ðŸš“
        uses: actions/checkout@v3
          
      - name: Restore Dependencies ðŸ“©
        shell: cmd
        run: dotnet restore /clp:ErrorsOnly

      - name: Build App ðŸ”³
        shell: PowerShell
        run: |
          dotnet build -c Release --no-restore /clp:ErrorsOnly
          if(!($?)){
            $github_URL = ("https://api.github.com/users/" + "${{ github.actor }}")
            $User = Invoke-RestMethod -Method Get -Uri $github_URL
            $username = ""
            if([string]::IsNullOrEmpty($User.name)){
                $username = $User.login
            }else{
                $username = $User.name
            }
            $title = ("Error on BUILDING Project  in " + "${{ github.ref_name }}" + " Branch & pushed by " + $username)
            $param = @{
                Uri = "https://jsonplaceholder.typicode.com/posts"
                Method = "POST"
                Body = @{
                    id = 1
                    title = $title
                    body = ""
                    text = ""
                } | ConvertTo-Json
                ContentType = 'application/json'
            }
            Invoke-RestMethod @param
          }

      # - name: Publish App ðŸš€
      #   shell: cmd
      #   run: dotnet publish -c Release -o ./out /clp:ErrorsOnly

      # - name: Deploy to QA Server âœ”
      #   shell: cmd
      #   run: |
      #     %windir%\system32\inetsrv\appcmd stop apppool gh-actions-iis-demo.com
      #     if '${{ github.ref_name }}'=='master' (xcopy .\out\* "c:\www\sandbox" /i /s /y /Q)
      #     if '${{ github.ref_name }}'=='stagging' (xcopy .\out\* "c:\www\stagging" /i /s /y /Q)
      #     if '${{ github.ref_name }}'=='qa' (xcopy .\out\* "c:\www\gh-actions-iis-demo.com" /i /s /y /Q)
      #     if '${{ github.ref_name }}'=='dev' (xcopy .\out\* "c:\www\dev" /i /s /y /Q)
      #     %windir%\system32\inetsrv\appcmd start apppool gh-actions-iis-demo.com
  # SQL:
  #   needs: Build_Test_Deploy
  #   uses: ./.github/workflows/runSqlScripts.yaml
  #   with:
  #     image_name: my-awesome-app
  #   secrets:
  #     INSTANCE: ${{ secrets.INSTANCE }}
  #     DBNAME: ${{ secrets.DBNAME }}
  #     UID: ${{ secrets.UID }}
  #     PASSWORD: ${{ secrets.PASSWORD }}
