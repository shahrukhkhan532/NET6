# For auto generating this yaml file for .NET project run these command sequencely
#dotnet new workflow --search
#dotnet new --install TimHeuer.GitHubActions.Templates
#dotnet new workflow

name: Continues Integration and Deployment

on:
  push:
    branches:
      - master
      - stagging
      - qa
      - dev

env:
  DOTNET_VERSION: "6.0.x"
  AZURE_WEB_APP_NAME: rainers-first-webapp

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_test_deploy:
    runs-on:
      - self-hosted
      - label-test
    environment: ${{ github.ref_name }}
    steps:
      - name: Check Out Code ðŸš“
        uses: actions/checkout@v3

      - name: Run SQL Scripts ðŸ“œ
        shell: PowerShell
        run: |
          Write-Output ("THIS IS BRANCH" + $branch)
          $path = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('.\')
          $scriptPath = $path + "\DB Script"
          Write-Output $scriptPath

          $instance = "${{ secrets.INSTANCE }}"
          $DbName = "${{ secrets.DBNAME }}"
          $UID = "${{ secrets.UID }}"
          $Password = "${{ secrets.PASSWORD }}"
          $OutputSQLFilePath = $path + "\SQL.log"

          $files = Get-ChildItem -Path $scriptPath -Recurse -Include *.sql
          $message = ""
          foreach ($file in $files) 
          {
              Invoke-Sqlcmd -ServerInstance $instance -Database $DbName -Username $UID -Password $Password -InputFile $file -Verbose *>> $OutputSQLFilePath
              if(!($?)){
                $message += $file.Name + " File Contains Errors. Please see logs file in root directory.`n"
              }else{
                $message += $file.Name + " Successfully Executed.`n"
              }
          }
          $github_URL = "https://api.github.com/users/" + "${{ github.actor }}"
          $User = Invoke-RestMethod -Method Get -Uri $github_URL
          $username = ""
          if([string]::IsNullOrEmpty($User.name)){
              $username = $User.login
          }else{
              $username = $User.name
          }
          $title = "âš  " + $username + " Deployment Done on " + "${{ github.ref_name }}"
          $param = @{
              Uri = "https://jsonplaceholder.typicode.com/posts"
              Method = "POST"
              Body = @{
                  id = 1
                  title = $title
                  body = $message
              } | ConvertTo-Json
              ContentType = 'application/json'
          }
          Invoke-RestMethod @param
          $message > ($path + "\LOGS.log")

      
      - name: Restore Dependencies ðŸ“©
        shell: cmd
        run: dotnet restore /clp:ErrorsOnly

      - name: Build App ðŸ”³
        shell: cmd
        run: dotnet build -c Release --no-restore /clp:ErrorsOnly

      - name: Publish App ðŸš€
        shell: cmd
        run: dotnet publish -c Release -o ./out /clp:ErrorsOnly

      - name: Deploy to QA Server âœ”
        shell: cmd
        run: |
          %windir%\system32\inetsrv\appcmd stop apppool gh-actions-iis-demo.com
          if '${{ github.ref_name }}'=='master' (xcopy .\out\* "c:\www\sandbox" /i /s /y /Q)
          if '${{ github.ref_name }}'=='stagging' (xcopy .\out\* "c:\www\stagging" /i /s /y /Q)
          if '${{ github.ref_name }}'=='qa' (xcopy .\out\* "c:\www\gh-actions-iis-demo.com" /i /s /y /Q)
          if '${{ github.ref_name }}'=='dev' (xcopy .\out\* "c:\www\dev" /i /s /y /Q)
          %windir%\system32\inetsrv\appcmd start apppool gh-actions-iis-demo.com

      # - name: Notify Development Team ðŸ””
      #   run: |
      #     $url='https://api.github.com/users/'+'${{ github.actor }}'
      #     $content=(curl $url -Method 'GET').Content
      #     $username=$content | jq -r '.name'
      #     $message="Deployment done by "+$username+" on QA."
      #     $json="{ 'title':'Test', 'text':'$message' }"
      #     curl -body $json ${{ secrets.TEAM_URL }} -Method 'POST'
