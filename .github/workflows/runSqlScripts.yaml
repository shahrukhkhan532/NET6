name: Run Sql Script ðŸ“œ

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      tag:
        type: string
    secrets:
      INSTANCE:
        required: true
      DBNAME:
        required: true
      UID:
        required: true
      PASSWORD:
        required: true

jobs:
  RUN-SQL-SCRIPTS:
    runs-on:
      - self-hosted
      - label-test
    steps:
      - name: Check Out Code ðŸš“
        uses: actions/checkout@v3

      - name: Run SQL Scripts ðŸ“œ
        shell: PowerShell
        run: |
          Write-Output ("THIS IS BRANCH" + $branch)
          $path = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath('.\')
          $scriptPath = $path + "\DB Script"
          Write-Output $scriptPath

          $instance = "${{ secrets.INSTANCE }}"
          $DbName = "${{ secrets.DBNAME }}"
          $UID = "${{ secrets.UID }}"
          $Password = "${{ secrets.PASSWORD }}"
          $OutputSQLFilePath = $path + "\SQL.log"

          $files = Get-ChildItem -Path $scriptPath -Recurse -Include *.sql
          $message = ""
          foreach ($file in $files) 
          {
              Invoke-Sqlcmd -ServerInstance $instance -Database $DbName -Username $UID -Password $Password -InputFile $file -Verbose *>> $OutputSQLFilePath
              if(!($?)){
                $message += $file.Name + " File Contains Errors. Please see logs file in root directory.`n"
              }else{
                $message += $file.Name + " Successfully Executed.`n"
              }
          }
          $github_URL = "https://api.github.com/users/" + "${{ github.actor }}"
          $User = Invoke-RestMethod -Method Get -Uri $github_URL
          $username = ""
          if([string]::IsNullOrEmpty($User.name)){
              $username = $User.login
          }else{
              $username = $User.name
          }
          $title = "âš  " + $username + " Deployment Done on " + "${{ github.ref_name }}"
          $param = @{
              Uri = "https://jsonplaceholder.typicode.com/posts"
              Method = "POST"
              Body = @{
                  id = 1
                  title = $title
                  body = $message
              } | ConvertTo-Json
              ContentType = 'application/json'
          }
          Invoke-RestMethod @param
          $message > ($path + "\LOGS.log")